<%
function getFirstEntry (speaker) {
  for (const calName in calendar) {
    const cal = calendar[calName]
    let roomNr = 0
    for (const room in cal.rooms) {
      roomNr += 1
      const entries = cal.rooms[room]
      for (const entry of entries) {
        if (entry.person === speaker.id) {
          return {
            speaker,
            roomNr,
            calName,
            entry
          }
        }
        if (entry.entries) {
          let entryNr = 0
          for (const subEntry of entry.entries) {
            entryNr += 1
            if (subEntry.person === speaker.id) {
              return {
                speaker,
                roomNr,
                calName,
                entry,
                subEntry,
                entryNr
              }
            }
          }
        }
      }
    }
  }
  return null
}
function sortSpeakers (a, b) {
  
  // Featured speakers first
  if (a.featured && b.featured) return a.index - b.index // Keep sorting as is for featured speakers
  if (a.featured && !b.featured) return -1
  if (b.featured && !a.featured) return 1

  const aEntry = getFirstEntry(a)
  const bEntry = getFirstEntry(b)
  
  // Speakers without entry go to the bottom
  if (aEntry && !bEntry) return -1
  if (bEntry && !aEntry) return 1
  if (!aEntry && !bEntry) return 0 // Can't check at greater detail

  // Speakers in lightning talk sessions go to bottom
  if (!aEntry.subEntry && bEntry.subEntry) return -1
  if (!bEntry.subEntry && aEntry.subEntry) return 1

  if (aEntry.entry !== bEntry.entry) {
    const aTime = new Date(aEntry.entry.start)
    const bTime = new Date(bEntry.entry.start)
    if (aTime.getTime() !== bTime.getTime()) {
      // Earlier first!
      return aTime.getTime() - bTime.getTime()
    }
    // First room first.
    return aEntry.roomNr - bEntry.roomNr
  }

  // Lightning talks that are in same entry
  return aEntry.entryNr - bEntry.entryNr
}
var page = {
  title: 'Speakers',
  speakers: Object.values(speakers).map((speaker, index) => Object.assign(Object.assign({}, speaker), {index})).sort(sortSpeakers)
}
%>
<%- include('_layout/header', page) -%>

<%- include('_partial/svg') -%>

<%- include('_partial/navigation') -%>

<div class="main">

  <section class="page speakers">
    <h2 class="page-title speakers-title"><%= page.title %></h2>

    <div class="page-body speakers-body">
      <ul class="speakers-list">
        <%
          for (const speaker of page.speakers) {
          %>
        <li>
          <%- include('_partial/speaker', { id: speaker.id, link: false }) -%>
        </li>
        <%
          }
          %>
      </ul>
    </div>

  </section>

</div>

<%- include('_layout/footer') -%>
